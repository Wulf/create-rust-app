use dsync::{self, GenerationConfig, GenerationConfigOpts, TableOptions};
use std::collections::HashMap;
use std::path::PathBuf;

pub fn main() {
    let dir = env!("CARGO_MANIFEST_DIR");

    println!("Running dsync (generating model code from `backend/schema.rs`)");

    let schema_file = PathBuf::from_iter([dir, "backend/schema.rs"]);
    let models_dir = PathBuf::from_iter([dir, "backend/models"]);

    ensure_schema_is_generated(&schema_file);

    dsync::generate_files(
        &schema_file,
        &models_dir,
        GenerationConfig {
            diesel_backend: "diesel::pg::Pg".to_string(),
            connection_type: "create_rust_app::Connection".to_string(),
            options: GenerationConfigOpts {
                default_table_options: TableOptions::default().tsync().autogenerated_columns(vec![
                    "id",
                    "created_at",
                    "updated_at",
                ]),
                model_path: "crate::models::".to_string(),
                schema_path: "crate::schema::".to_string(),
                table_options: HashMap::from([
                    // plugin_storage
                    ("attachment_blobs", TableOptions::default().ignore()),
                    ("attachments", TableOptions::default().ignore()),
                    // plugin_auth
                    ("role_permissions", TableOptions::default().ignore()),
                    ("user_permissions", TableOptions::default().ignore()),
                    ("user_roles", TableOptions::default().ignore()),
                    ("user_sessions", TableOptions::default().ignore()),
                    ("users", TableOptions::default().ignore()),
                    ("user_oauth2_links", TableOptions::default().ignore()),
                    // plugin_tasks
                    ("fang_tasks", TableOptions::default().ignore()),
                ]),
                ..Default::default()
            },
        },
    )
    .expect("Failed to generate model code from diesel schema.");
}

pub fn ensure_schema_is_generated(schema_file: &PathBuf) {
    // check that the diesel schema file is not empty
    let content = std::fs::read_to_string(schema_file).unwrap_or_default();

    if content.trim().is_empty() {
        println!("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
        println!(" The diesel schema file is not generated yet.");
        println!(" If this is a new project, did you forget\n the `diesel database setup` step?");
        println!("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
        panic!("`backend/schema.rs` is empty or not present");
    }
}
