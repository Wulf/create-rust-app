name: CLI Continuous Integration (Compilation tests for variations of Poem + Postgres)
on:
  workflow_dispatch:
  push:
    branches: 
      - "main"
    paths: 
      - "**.rs"
      - "Cargo.lock"
      - "Cargo.toml"
  pull_request:
    paths: 
      - "**.rs"
      - "Cargo.lock"
      - "Cargo.toml"
env:
  CARGO_TERM_COLOR: always
  
concurrency:
  group:  CI-PP-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # naming convention is: [backend]-[database]-[plugins]
  Poem-Postgres-None:
    name: Poem w/ Postgres and no plugins
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: rui314/setup-mold@v1
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v3.2.5
        with:
          path: |
            **/.cargo/.build
            **/target
          key: ${{ runner.os }}-cargo-cli-PP-${{ hashFiles('**/Cargo.lock') }}
      - run: git config --global user.name test
      - run: git config --global user.email example@email.com
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: run
          args: --bin create-rust-app -- create -c -d postgres -b poem test-project
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --manifest-path=test-project/Cargo.toml
  
  Poem-Postgres-All:
    needs: [Poem-Postgres-None]
    name: Poem w/ Postgres and all valid plugins
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: rui314/setup-mold@v1
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v3.2.5
        with:
          path: |
            **/.cargo/.build
            **/target
          key: ${{ runner.os }}-cargo-cli-PP-${{ hashFiles('**/Cargo.lock') }}
      - run: git config --global user.name test
      - run: git config --global user.email example@email.com
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: run
          args: --bin create-rust-app -- create -c -d postgres -b poem --plugins=auth,container,graphql,storage test-project
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --manifest-path=test-project/Cargo.toml

  Poem-Postgres-Container:
    needs: [Poem-Postgres-None]
    name: Poem w/ Postgres and the container plugin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: rui314/setup-mold@v1
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v3.2.5
        with:
          path: |
            **/.cargo/.build
            **/target
          key: ${{ runner.os }}-cargo-cli-PP-${{ hashFiles('**/Cargo.lock') }}
      - run: git config --global user.name test
      - run: git config --global user.email example@email.com
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: run
          args: --bin create-rust-app -- create -c -d postgres -b poem --plugins=container test-project
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --manifest-path=test-project/Cargo.toml

  Poem-Postgres-Auth:
    needs: [Poem-Postgres-None]
    name: Poem w/ Postgres and the auth plugin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: rui314/setup-mold@v1
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v3.2.5
        with:
          path: |
            **/.cargo/.build
            **/target
          key: ${{ runner.os }}-cargo-cli-PP-${{ hashFiles('**/Cargo.lock') }}
      - run: git config --global user.name test
      - run: git config --global user.email example@email.com
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: run
          args: --bin create-rust-app -- create -c -d postgres -b poem --plugins=auth test-project
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --manifest-path=test-project/Cargo.toml

  Poem-Postgres-Storage:
    needs: [Poem-Postgres-None]
    name: Poem w/ Postgres and the storage plugin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: rui314/setup-mold@v1
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v3.2.5
        with:
          path: |
            **/.cargo/.build
            **/target
          key: ${{ runner.os }}-cargo-cli-PP-${{ hashFiles('**/Cargo.lock') }}
      - run: git config --global user.name test
      - run: git config --global user.email example@email.com
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: run
          args: --bin create-rust-app -- create -c -d postgres -b poem --plugins=storage test-project
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --manifest-path=test-project/Cargo.toml

  Poem-Postgres-GraphQL:
    needs: [Poem-Postgres-None]
    name: Poem w/ Postgres and the graphql plugin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: rui314/setup-mold@v1
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/cache@v3.2.5
        with:
          path: |
            **/.cargo/.build
            **/target
          key: ${{ runner.os }}-cargo-cli-PP-${{ hashFiles('**/Cargo.lock') }}
      - run: git config --global user.name test
      - run: git config --global user.email example@email.com
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: run
          args: --bin create-rust-app -- create -c -d postgres -b poem --plugins=graphql,auth test-project
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --manifest-path=test-project/Cargo.toml
